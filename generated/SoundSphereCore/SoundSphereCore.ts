// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreatingMusicBloc extends ethereum.Event {
  get params(): CreatingMusicBloc__Params {
    return new CreatingMusicBloc__Params(this);
  }
}

export class CreatingMusicBloc__Params {
  _event: CreatingMusicBloc;

  constructor(event: CreatingMusicBloc) {
    this._event = event;
  }

  get bloc(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class JoinedMusicBloc extends ethereum.Event {
  get params(): JoinedMusicBloc__Params {
    return new JoinedMusicBloc__Params(this);
  }
}

export class JoinedMusicBloc__Params {
  _event: JoinedMusicBloc;

  constructor(event: JoinedMusicBloc) {
    this._event = event;
  }

  get bloc(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seedBox(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Merged extends ethereum.Event {
  get params(): Merged__Params {
    return new Merged__Params(this);
  }
}

export class Merged__Params {
  _event: Merged;

  constructor(event: Merged) {
    this._event = event;
  }

  get bloc(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seedId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class NewMusicBloc extends ethereum.Event {
  get params(): NewMusicBloc__Params {
    return new NewMusicBloc__Params(this);
  }
}

export class NewMusicBloc__Params {
  _event: NewMusicBloc;

  constructor(event: NewMusicBloc) {
    this._event = event;
  }

  get bloc(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewSeedStarted extends ethereum.Event {
  get params(): NewSeedStarted__Params {
    return new NewSeedStarted__Params(this);
  }
}

export class NewSeedStarted__Params {
  _event: NewSeedStarted;

  constructor(event: NewSeedStarted) {
    this._event = event;
  }

  get bloc(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seed(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SeedCompleted extends ethereum.Event {
  get params(): SeedCompleted__Params {
    return new SeedCompleted__Params(this);
  }
}

export class SeedCompleted__Params {
  _event: SeedCompleted;

  constructor(event: SeedCompleted) {
    this._event = event;
  }

  get musicBloc(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seedId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class StatusPosted extends ethereum.Event {
  get params(): StatusPosted__Params {
    return new StatusPosted__Params(this);
  }
}

export class StatusPosted__Params {
  _event: StatusPosted;

  constructor(event: StatusPosted) {
    this._event = event;
  }

  get bloc(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get message(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get author(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SoundSphereCore__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class SoundSphereCore extends ethereum.SmartContract {
  static bind(address: Address): SoundSphereCore {
    return new SoundSphereCore("SoundSphereCore", address);
  }

  checkUpkeep(param0: Bytes): SoundSphereCore__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new SoundSphereCore__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<SoundSphereCore__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SoundSphereCore__checkUpkeepResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  getRouter(): Address {
    let result = super.call("getRouter", "getRouter():(address)", []);

    return result[0].toAddress();
  }

  try_getRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRouter", "getRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interval(): BigInt {
    let result = super.call("interval", "interval():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interval", "interval():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastTimeStamp(): BigInt {
    let result = super.call("lastTimeStamp", "lastTimeStamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastTimeStamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeStamp",
      "lastTimeStamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxReleasePeriod(): BigInt {
    let result = super.call(
      "maxReleasePeriod",
      "maxReleasePeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxReleasePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxReleasePeriod",
      "maxReleasePeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minBlocRequirement(): BigInt {
    let result = super.call(
      "minBlocRequirement",
      "minBlocRequirement():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minBlocRequirement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBlocRequirement",
      "minBlocRequirement():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  musicBlocs(param0: BigInt): Address {
    let result = super.call("musicBlocs", "musicBlocs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_musicBlocs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("musicBlocs", "musicBlocs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  musicBlocsCounter(): BigInt {
    let result = super.call(
      "musicBlocsCounter",
      "musicBlocsCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_musicBlocsCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "musicBlocsCounter",
      "musicBlocsCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  salts(param0: BigInt): Bytes {
    let result = super.call("salts", "salts(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_salts(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("salts", "salts(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minBlocRequirement(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get updateInterval(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CcipReceiveCall extends ethereum.Call {
  get inputs(): CcipReceiveCall__Inputs {
    return new CcipReceiveCall__Inputs(this);
  }

  get outputs(): CcipReceiveCall__Outputs {
    return new CcipReceiveCall__Outputs(this);
  }
}

export class CcipReceiveCall__Inputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }

  get message(): CcipReceiveCallMessageStruct {
    return changetype<CcipReceiveCallMessageStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CcipReceiveCall__Outputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }
}

export class CcipReceiveCallMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get destTokenAmounts(): Array<CcipReceiveCallMessageDestTokenAmountsStruct> {
    return this[4].toTupleArray<CcipReceiveCallMessageDestTokenAmountsStruct>();
  }
}

export class CcipReceiveCallMessageDestTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class CompleteSeedCall extends ethereum.Call {
  get inputs(): CompleteSeedCall__Inputs {
    return new CompleteSeedCall__Inputs(this);
  }

  get outputs(): CompleteSeedCall__Outputs {
    return new CompleteSeedCall__Outputs(this);
  }
}

export class CompleteSeedCall__Inputs {
  _call: CompleteSeedCall;

  constructor(call: CompleteSeedCall) {
    this._call = call;
  }

  get bloc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seedBox(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get seedID(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get seed(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CompleteSeedCall__Outputs {
  _call: CompleteSeedCall;

  constructor(call: CompleteSeedCall) {
    this._call = call;
  }
}

export class CreateMusicBlocCall extends ethereum.Call {
  get inputs(): CreateMusicBlocCall__Inputs {
    return new CreateMusicBlocCall__Inputs(this);
  }

  get outputs(): CreateMusicBlocCall__Outputs {
    return new CreateMusicBlocCall__Outputs(this);
  }
}

export class CreateMusicBlocCall__Inputs {
  _call: CreateMusicBlocCall;

  constructor(call: CreateMusicBlocCall) {
    this._call = call;
  }

  get cid(): string {
    return this._call.inputValues[0].value.toString();
  }

  get seed(): string {
    return this._call.inputValues[1].value.toString();
  }

  get blocAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateMusicBlocCall__Outputs {
  _call: CreateMusicBlocCall;

  constructor(call: CreateMusicBlocCall) {
    this._call = call;
  }
}

export class JoinMusicBlocCall extends ethereum.Call {
  get inputs(): JoinMusicBlocCall__Inputs {
    return new JoinMusicBlocCall__Inputs(this);
  }

  get outputs(): JoinMusicBlocCall__Outputs {
    return new JoinMusicBlocCall__Outputs(this);
  }
}

export class JoinMusicBlocCall__Inputs {
  _call: JoinMusicBlocCall;

  constructor(call: JoinMusicBlocCall) {
    this._call = call;
  }

  get bloc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cid(): string {
    return this._call.inputValues[1].value.toString();
  }

  get contributors(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class JoinMusicBlocCall__Outputs {
  _call: JoinMusicBlocCall;

  constructor(call: JoinMusicBlocCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class PostStatusCall extends ethereum.Call {
  get inputs(): PostStatusCall__Inputs {
    return new PostStatusCall__Inputs(this);
  }

  get outputs(): PostStatusCall__Outputs {
    return new PostStatusCall__Outputs(this);
  }
}

export class PostStatusCall__Inputs {
  _call: PostStatusCall;

  constructor(call: PostStatusCall) {
    this._call = call;
  }

  get bloc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get message(): string {
    return this._call.inputValues[1].value.toString();
  }

  get seedBox(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PostStatusCall__Outputs {
  _call: PostStatusCall;

  constructor(call: PostStatusCall) {
    this._call = call;
  }
}

export class StartContributionCall extends ethereum.Call {
  get inputs(): StartContributionCall__Inputs {
    return new StartContributionCall__Inputs(this);
  }

  get outputs(): StartContributionCall__Outputs {
    return new StartContributionCall__Outputs(this);
  }
}

export class StartContributionCall__Inputs {
  _call: StartContributionCall;

  constructor(call: StartContributionCall) {
    this._call = call;
  }

  get bloc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seedBox(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StartContributionCall__Outputs {
  _call: StartContributionCall;

  constructor(call: StartContributionCall) {
    this._call = call;
  }
}
